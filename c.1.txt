= c(1)
:doctype:    manpage
:man source: c.py

== Name

c - a shell wrapper for c.py

== Synopsis

----
c [-AbeEnstTuv] [-N] [-Vh] [file [file ...]] [--] [c.py options]
----

== Description

c(1) is a shell wrapper for c.py(1) which pipes the output automatically
through a pager. Furthermore c(1) exposes the traditional cat(1) options
and makes them available by piping c.py's output through cat.

== Options

c(1) has four categories of options: cat(1) options, less(1) options, c(1)
options, c.py(1) options; the options in the synopsis section are grouped
appropriately. Since each tool provides proper documentation, these options
can be looked up there.

`-p`::
    Use no pager; that switch is the same as setting `C_NO_PAGER` to a
    nonempty value.

`-V`::
    Show c(1)'s version and exit.

`-h`::
    Show helppage and exit.

== Evironment Variables

`PAGER`::
    Use the `PAGER` variable to specify a global pager; `less` is recommended.

`LESS`::
    It is recommended to use the pager `less`. less respects the environment
    variable `LESS`. When `LESS` is not set, c(1) sets the variable to `FRX`.
    That enables using colors and the pager is closed automatically if the
    output fits on the screen.

`C_PAGER`::
    Can be used to overwrite `PAGER` and use a separate pager for c(1).

`C_NO_PAGER`::
    When `C_NO_PAGER` is set to a non empty value, no pager is used.

`C_DEV`::
    Set this variable to a non empty value when you decide to hack the source
    of c(1)/c.py(1). In case `C_DEV` is set, c(1) looks for the c.py(1)
    executable in the current directory instead of searching `PATH`.

== Bugs

Bugs? You must be kidding; there are no bugs in this software. But if we
happen to be wrong, send us an email with as much detail as possible to
mailto:rumpelsepp@sevenbyte.org[].

== Author

Current maintainer: Stefan Tatschner <rumpelsepp@sevenbyte.org>

For additional contributors, use `git shortlog -sne` on the c.py.git
repository.
